{"file_contents":{"README.md":{"content":"## Running React on Replit\n\n[React](https://reactjs.org/) is a popular JavaScript library for building user interfaces.\n\n[Vite](https://vitejs.dev/) is a blazing fast frontend build tool that includes features like Hot Module Reloading (HMR), optimized builds, and TypeScript support out of the box.\n\nUsing the two in conjunction is one of the fastest ways to build a web app.\n\n### Getting Started\n- Hit run\n- Edit [App.tsx](#src/App.tsx) and watch it live update!\n\nBy default, Replit runs the `dev` script, but you can configure it by changing the `run` field in the [configuration file](#.replit). Here are the vite docs for [serving production websites](https://vitejs.dev/guide/build.html)","size_bytes":693},"vite.config.js":{"content":"import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    allowedHosts: ['all'],\n  }\n})\n","size_bytes":245},"src/App.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;","size_bytes":58},"src/App.tsx":{"content":"import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from 'react-router-dom';\nimport { AuthProvider, useAuth } from './context/AuthContext';\nimport Navigation from './components/Navigation';\nimport Login from './pages/Login';\nimport Dashboard from './pages/Dashboard';\nimport MyCard from './pages/MyCard';\nimport NewRecycling from './pages/NewRecycling';\nimport RedeemCredits from './pages/RedeemCredits';\nimport ValidationAdmin from './pages/ValidationAdmin';\nimport './App.css';\n\nconst ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { isAuthenticated } = useAuth();\n  return isAuthenticated ? <>{children}</> : <Navigate to=\"/login\" replace />;\n};\n\nconst AppLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const location = useLocation();\n  const isLoginPage = location.pathname === '/login';\n\n  if (isLoginPage) {\n    return <>{children}</>;\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Navigation />\n      <div className=\"flex-1 lg:pl-64\">\n        <main className=\"flex-1 relative overflow-y-auto focus:outline-none\">\n          <div className=\"pb-24 lg:pb-0 min-h-screen\">\n            {children}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nconst AppRoutes: React.FC = () => {\n  const { isAuthenticated } = useAuth();\n\n  return (\n    <AppLayout>\n      <Routes>\n        <Route \n          path=\"/login\" \n          element={isAuthenticated ? <Navigate to=\"/dashboard\" replace /> : <Login />} \n        />\n        <Route\n          path=\"/dashboard\"\n          element={\n            <ProtectedRoute>\n              <Dashboard />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/my-card\"\n          element={\n            <ProtectedRoute>\n              <MyCard />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/new-recycling\"\n          element={\n            <ProtectedRoute>\n              <NewRecycling />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/redeem-credits\"\n          element={\n            <ProtectedRoute>\n              <RedeemCredits />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/validation\"\n          element={\n            <ProtectedRoute>\n              <ValidationAdmin />\n            </ProtectedRoute>\n          }\n        />\n        <Route path=\"/\" element={<Navigate to=\"/dashboard\" replace />} />\n      </Routes>\n    </AppLayout>\n  );\n};\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <div className=\"App\">\n          <AppRoutes />\n        </div>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;","size_bytes":2758},"src/index.tsx":{"content":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n)","size_bytes":223},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}","size_bytes":79},"replit.md":{"content":"# EcoPass - Recycling Incentive Application\n\n## Overview\n\nEcoPass is a modern frontend application built with React, TypeScript, and Tailwind CSS that incentivizes recycling by allowing users to earn credits for recycling materials. These credits can be redeemed for public transportation. The application features a responsive, mobile-first design with a dashboard/admin layout that works seamlessly across mobile and desktop devices.\n\nThe app simulates a complete recycling ecosystem where users can register recycling submissions, view their digital card with QR codes, track their credits, and redeem them for transportation options. It includes an admin validation system for approving recycling submissions.\n\n## Recent Changes\n\n**September 28, 2025** - Complete EcoPass application implementation:\n- Built all core pages: Login/Register, Dashboard, My Card, New Recycling, Redeem Credits, Validation Admin\n- Implemented responsive navigation with desktop sidebar and mobile menu\n- Added QR code generation for digital cards\n- Created complete authentication system with localStorage persistence\n- Built recycling submission and approval workflow\n- Added credit redemption system for transport options\n- Applied modern green-themed UI design following reference image\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development practices\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Styling**: Tailwind CSS with custom color palette and responsive design utilities\n- **Routing**: React Router DOM v7 for client-side navigation and route protection\n- **State Management**: React Context API for authentication and user state management\n\n### Component Structure\n- **Layout Components**: Responsive navigation with mobile hamburger menu and desktop sidebar\n- **Page Components**: Modular page structure including Dashboard, Login, MyCard, NewRecycling, RedeemCredits, and ValidationAdmin\n- **Protected Routes**: Authentication-based route protection redirecting unauthenticated users to login\n- **Context Providers**: Centralized authentication context for user session management\n\n### Data Management\n- **Storage Solution**: localStorage for client-side data persistence (simulating backend functionality)\n- **Data Models**: TypeScript interfaces for User, RecyclingItem, CollectionPoint, and TransportOption entities\n- **State Persistence**: User authentication state and application data persisted across browser sessions\n\n### Authentication System\n- **Method**: localStorage-based authentication simulation without backend dependency\n- **User Management**: Registration, login, logout functionality with form validation\n- **Session Persistence**: Automatic user session restoration on application reload\n- **Route Protection**: Private routes requiring authentication with redirect logic\n\n### UI/UX Design\n- **Design System**: Mobile-first responsive design with Tailwind CSS utilities\n- **Color Scheme**: Custom primary green color palette reflecting environmental theme\n- **Icons**: Lucide React icon library for consistent iconography\n- **Layout**: Dashboard-style interface with sidebar navigation and main content area\n\n## External Dependencies\n\n### Core Libraries\n- **React & React DOM**: Frontend framework and DOM rendering\n- **TypeScript**: Static type checking and enhanced development experience\n- **React Router DOM**: Client-side routing and navigation management\n\n### UI & Styling\n- **Tailwind CSS**: Utility-first CSS framework with PostCSS integration\n- **Lucide React**: Comprehensive icon library for consistent UI elements\n- **QRCode.react**: QR code generation for digital card functionality\n\n### Build & Development\n- **Vite**: Fast build tool with hot module replacement and optimized bundling\n- **@vitejs/plugin-react**: React plugin for Vite with JSX transformation\n- **PostCSS & Autoprefixer**: CSS processing and browser compatibility\n\n### Type Definitions\n- **@types/react**: TypeScript definitions for React\n- **@types/react-dom**: TypeScript definitions for React DOM\n- **@types/react-router-dom**: TypeScript definitions for React Router\n- **@types/qrcode.react**: TypeScript definitions for QR code library\n\nThe application is designed to be fully functional without external backend services, using localStorage to simulate database operations and user authentication, making it ideal for demonstration and development purposes.","size_bytes":4553},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#f0fdf4',\n          100: '#dcfce7',\n          200: '#bbf7d0',\n          300: '#86efac',\n          400: '#4ade80',\n          500: '#22c55e',\n          600: '#16a34a',\n          700: '#15803d',\n          800: '#166534',\n          900: '#14532d',\n        },\n      },\n    },\n  },\n  plugins: [],\n}","size_bytes":500},"src/components/Navigation.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { \n  Home, \n  CreditCard, \n  Plus, \n  Gift, \n  CheckSquare, \n  LogOut, \n  Menu, \n  X,\n  Recycle \n} from 'lucide-react';\n\nconst Navigation: React.FC = () => {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { user, logout } = useAuth();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    logout();\n    navigate('/login');\n  };\n\n  const navigationItems = [\n    { path: '/dashboard', label: 'Dashboard', icon: Home },\n    { path: '/my-card', label: 'Meu Cartão', icon: CreditCard },\n    { path: '/new-recycling', label: 'Nova Reciclagem', icon: Plus },\n    { path: '/redeem-credits', label: 'Resgatar Créditos', icon: Gift },\n    { path: '/validation', label: 'Validação Admin', icon: CheckSquare },\n  ];\n\n  const isActivePath = (path: string) => location.pathname === path;\n\n  return (\n    <>\n      {/* Desktop Sidebar */}\n      <div className=\"hidden lg:flex lg:w-64 lg:flex-col lg:fixed lg:inset-y-0\">\n        <div className=\"flex flex-col flex-grow bg-white border-r border-gray-200 pt-5 pb-4 overflow-y-auto\">\n          <div className=\"flex items-center flex-shrink-0 px-4\">\n            <div className=\"flex items-center\">\n              <div className=\"h-8 w-8 bg-primary-600 rounded-full flex items-center justify-center\">\n                <Recycle className=\"h-5 w-5 text-white\" />\n              </div>\n              <div className=\"ml-3\">\n                <h1 className=\"text-xl font-bold text-gray-900\">EcoPass</h1>\n                <p className=\"text-xs text-gray-500\">Sustentabilidade em Créditos</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mt-5 flex-grow flex flex-col\">\n            <nav className=\"flex-1 px-2 space-y-1\">\n              {navigationItems.map((item) => {\n                const Icon = item.icon;\n                return (\n                  <Link\n                    key={item.path}\n                    to={item.path}\n                    className={`group flex items-center px-2 py-2 text-sm font-medium rounded-md ${\n                      isActivePath(item.path)\n                        ? 'bg-primary-100 text-primary-900'\n                        : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                    }`}\n                  >\n                    <Icon\n                      className={`mr-3 flex-shrink-0 h-6 w-6 ${\n                        isActivePath(item.path) ? 'text-primary-600' : 'text-gray-400 group-hover:text-gray-500'\n                      }`}\n                    />\n                    {item.label}\n                  </Link>\n                );\n              })}\n            </nav>\n          </div>\n\n          {/* User Info */}\n          {user && (\n            <div className=\"flex-shrink-0 flex border-t border-gray-200 p-4\">\n              <div className=\"flex-shrink-0 w-full group block\">\n                <div className=\"flex items-center\">\n                  <div className=\"ml-3 flex-1\">\n                    <p className=\"text-sm font-medium text-gray-700\">{user.name}</p>\n                    <p className=\"text-xs text-gray-500\">R$ {user.credits.toFixed(2)} disponível</p>\n                  </div>\n                  <button\n                    onClick={handleLogout}\n                    className=\"ml-3 p-2 text-gray-400 hover:text-gray-600\"\n                    title=\"Sair\"\n                  >\n                    <LogOut className=\"h-5 w-5\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Mobile Navigation */}\n      <div className=\"lg:hidden\">\n        {/* Mobile Header */}\n        <div className=\"bg-white shadow-sm border-b border-gray-200\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between items-center py-4\">\n              <div className=\"flex items-center\">\n                <div className=\"h-8 w-8 bg-primary-600 rounded-full flex items-center justify-center\">\n                  <Recycle className=\"h-5 w-5 text-white\" />\n                </div>\n                <div className=\"ml-3\">\n                  <h1 className=\"text-xl font-bold text-gray-900\">EcoPass</h1>\n                </div>\n              </div>\n              \n              <button\n                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n                className=\"p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100\"\n              >\n                {isMobileMenuOpen ? (\n                  <X className=\"h-6 w-6\" />\n                ) : (\n                  <Menu className=\"h-6 w-6\" />\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"fixed inset-0 flex z-40 lg:hidden\">\n            <div className=\"fixed inset-0 bg-gray-600 bg-opacity-75\" onClick={() => setIsMobileMenuOpen(false)} />\n            \n            <div className=\"relative flex-1 flex flex-col max-w-xs w-full bg-white\">\n              <div className=\"absolute top-0 right-0 -mr-12 pt-2\">\n                <button\n                  onClick={() => setIsMobileMenuOpen(false)}\n                  className=\"ml-1 flex items-center justify-center h-10 w-10 rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\"\n                >\n                  <X className=\"h-6 w-6 text-white\" />\n                </button>\n              </div>\n              \n              <div className=\"flex-1 h-0 pt-5 pb-4 overflow-y-auto\">\n                <nav className=\"mt-5 px-2 space-y-1\">\n                  {navigationItems.map((item) => {\n                    const Icon = item.icon;\n                    return (\n                      <Link\n                        key={item.path}\n                        to={item.path}\n                        onClick={() => setIsMobileMenuOpen(false)}\n                        className={`group flex items-center px-2 py-2 text-base font-medium rounded-md ${\n                          isActivePath(item.path)\n                            ? 'bg-primary-100 text-primary-900'\n                            : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                        }`}\n                      >\n                        <Icon\n                          className={`mr-4 flex-shrink-0 h-6 w-6 ${\n                            isActivePath(item.path) ? 'text-primary-600' : 'text-gray-400'\n                          }`}\n                        />\n                        {item.label}\n                      </Link>\n                    );\n                  })}\n                </nav>\n              </div>\n\n              {/* Mobile User Info */}\n              {user && (\n                <div className=\"flex-shrink-0 flex border-t border-gray-200 p-4\">\n                  <div className=\"flex items-center w-full\">\n                    <div className=\"flex-1\">\n                      <p className=\"text-base font-medium text-gray-700\">{user.name}</p>\n                      <p className=\"text-sm text-gray-500\">R$ {user.credits.toFixed(2)} disponível</p>\n                    </div>\n                    <button\n                      onClick={handleLogout}\n                      className=\"ml-3 p-2 text-gray-400 hover:text-gray-600\"\n                      title=\"Sair\"\n                    >\n                      <LogOut className=\"h-6 w-6\" />\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Bottom Navigation for Mobile */}\n      <div className=\"lg:hidden fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 z-30 safe-area-inset-bottom\">\n        <nav className=\"flex\">\n          {navigationItems.slice(0, 4).map((item) => {\n            const Icon = item.icon;\n            return (\n              <Link\n                key={item.path}\n                to={item.path}\n                className={`flex-1 flex flex-col items-center justify-center py-3 px-2 ${\n                  isActivePath(item.path)\n                    ? 'text-primary-600'\n                    : 'text-gray-400 hover:text-gray-600'\n                }`}\n              >\n                <Icon className=\"h-5 w-5\" />\n                <span className=\"text-xs mt-1 font-medium leading-tight\">{item.label.split(' ')[0]}</span>\n              </Link>\n            );\n          })}\n        </nav>\n      </div>\n    </>\n  );\n};\n\nexport default Navigation;","size_bytes":8686},"src/context/AuthContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User } from '../types';\nimport { getCurrentUser, setCurrentUser, clearCurrentUser } from '../utils/localStorage';\n\ninterface AuthContextType {\n  user: User | null;\n  login: (user: User) => void;\n  logout: () => void;\n  updateUser: (updates: Partial<User>) => void;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const savedUser = getCurrentUser();\n    if (savedUser) {\n      setUser(savedUser);\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = (newUser: User) => {\n    setUser(newUser);\n    setCurrentUser(newUser);\n  };\n\n  const logout = () => {\n    setUser(null);\n    clearCurrentUser();\n  };\n\n  const updateUser = (updates: Partial<User>) => {\n    if (user) {\n      const updatedUser = { ...user, ...updates };\n      setUser(updatedUser);\n      setCurrentUser(updatedUser);\n    }\n  };\n\n  const value = {\n    user,\n    login,\n    logout,\n    updateUser,\n    isAuthenticated: !!user,\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Carregando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};","size_bytes":1966},"src/pages/Dashboard.tsx":{"content":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { QRCodeSVG } from 'qrcode.react';\nimport { TrendingUp, CreditCard, Plus, Gift } from 'lucide-react';\n\nconst Dashboard: React.FC = () => {\n  const { user } = useAuth();\n\n  if (!user) return null;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-6 lg:py-8\">\n        {/* Header */}\n        <div className=\"mb-6 lg:mb-8\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900\">\n            Bem-vindo, {user.name.split(' ')[0]}!\n          </h1>\n          <p className=\"text-gray-600 mt-1 text-sm sm:text-base\">\n            Acompanhe seu saldo, submissões e histórico de reciclagem\n          </p>\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8\">\n          {/* Left Column - Stats and Actions */}\n          <div className=\"lg:col-span-2 space-y-4 sm:space-y-6\">\n            {/* Credits Card */}\n            <div className=\"bg-white rounded-lg shadow-lg p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">Saldo Disponível</h2>\n                <CreditCard className=\"h-6 w-6 text-primary-600\" />\n              </div>\n              <div className=\"text-3xl font-bold text-primary-600 mb-2\">\n                R$ {user.credits.toFixed(2)}\n              </div>\n              <p className=\"text-gray-600 text-sm mb-4\">\n                + R$ 1.60 pendente\n              </p>\n              <Link to=\"/redeem-credits\" className=\"block w-full bg-primary-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-primary-700 transition-colors text-center\">\n                Resgatar Créditos\n              </Link>\n            </div>\n\n            {/* Stats Grid */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <div className=\"bg-white rounded-lg shadow p-4 sm:p-6\">\n                <div className=\"flex items-center\">\n                  <TrendingUp className=\"h-8 w-8 text-green-500\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Total Ganho</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">R$ {user.totalEarned.toFixed(2)}</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-white rounded-lg shadow p-4 sm:p-6\">\n                <div className=\"flex items-center\">\n                  <Gift className=\"h-8 w-8 text-blue-500\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Total Resgatado</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">R$ {user.totalRedeemed.toFixed(2)}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Recent Activity */}\n            <div className=\"bg-white rounded-lg shadow-lg p-4 sm:p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Atividade Recente</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                    <div>\n                      <p className=\"font-medium text-gray-900\">Plástico - 2.5kg</p>\n                      <p className=\"text-sm text-gray-500\">19/01/2024</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                      Validado\n                    </span>\n                    <p className=\"text-sm text-gray-900 mt-1\">R$ 2.50</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Quick Actions */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <Link to=\"/new-recycling\" className=\"bg-primary-600 text-white p-4 sm:p-6 rounded-lg hover:bg-primary-700 transition-colors text-left block\">\n                <Plus className=\"h-8 w-8 mb-3\" />\n                <h3 className=\"font-semibold text-lg\">Nova Reciclagem</h3>\n                <p className=\"text-primary-100 text-sm\">Registre seus materiais</p>\n              </Link>\n              \n              <Link to=\"/redeem-credits\" className=\"bg-blue-600 text-white p-4 sm:p-6 rounded-lg hover:bg-blue-700 transition-colors text-left block\">\n                <Gift className=\"h-8 w-8 mb-3\" />\n                <h3 className=\"font-semibold text-lg\">Resgatar Créditos</h3>\n                <p className=\"text-blue-100 text-sm\">Troque por transporte</p>\n              </Link>\n            </div>\n          </div>\n\n          {/* Right Column - QR Card */}\n          <div className=\"lg:col-span-1 order-first lg:order-last\">\n            <div className=\"bg-white rounded-lg shadow-lg p-4 sm:p-6 lg:sticky lg:top-8\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Seu Cartão Digital</h3>\n              <p className=\"text-gray-600 text-sm mb-6\">\n                Apresente este QR code nos pontos de coleta\n              </p>\n              \n              <div className=\"text-center\">\n                <div className=\"bg-gray-50 p-3 sm:p-4 rounded-lg mb-4\">\n                  <QRCodeSVG\n                    value={`${user.cpf}-${user.id}`}\n                    size={160}\n                    className=\"mx-auto w-full max-w-[160px] h-auto\"\n                  />\n                </div>\n                \n                <div className=\"text-left space-y-2\">\n                  <p className=\"text-sm text-gray-600\">\n                    <span className=\"font-medium\">Nome:</span> {user.name}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    <span className=\"font-medium\">CPF:</span> {user.cpf}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    <span className=\"font-medium\">ID:</span> {user.id}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;","size_bytes":6542},"src/pages/Login.tsx":{"content":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { findUserByEmail, saveUser, generateId } from '../utils/localStorage';\nimport { User } from '../types';\nimport { Recycle, Leaf } from 'lucide-react';\n\nconst Login: React.FC = () => {\n  const [isLogin, setIsLogin] = useState(true);\n  const [formData, setFormData] = useState({\n    name: '',\n    cpf: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n  });\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { login } = useAuth();\n  const navigate = useNavigate();\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.email) {\n      newErrors.email = 'Email é obrigatório';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Email inválido';\n    }\n\n    if (!formData.password) {\n      newErrors.password = 'Senha é obrigatória';\n    } else if (formData.password.length < 6) {\n      newErrors.password = 'Senha deve ter pelo menos 6 caracteres';\n    }\n\n    if (!isLogin) {\n      if (!formData.name) newErrors.name = 'Nome é obrigatório';\n      if (!formData.cpf) newErrors.cpf = 'CPF é obrigatório';\n      if (formData.password !== formData.confirmPassword) {\n        newErrors.confirmPassword = 'Senhas não coincidem';\n      }\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!validateForm()) return;\n\n    setIsLoading(true);\n\n    try {\n      if (isLogin) {\n        // Login logic\n        const existingUser = findUserByEmail(formData.email);\n        if (existingUser) {\n          login(existingUser);\n          navigate('/dashboard');\n        } else {\n          setErrors({ email: 'Usuário não encontrado' });\n        }\n      } else {\n        // Register logic\n        const existingUser = findUserByEmail(formData.email);\n        if (existingUser) {\n          setErrors({ email: 'Email já cadastrado' });\n        } else {\n          const newUser: User = {\n            id: generateId(),\n            name: formData.name,\n            cpf: formData.cpf,\n            email: formData.email,\n            credits: 0,\n            totalEarned: 0,\n            totalRedeemed: 0,\n          };\n          \n          saveUser(newUser);\n          login(newUser);\n          navigate('/dashboard');\n        }\n      }\n    } catch (error) {\n      setErrors({ general: 'Erro inesperado. Tente novamente.' });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary-50 to-primary-100 flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto h-20 w-20 bg-primary-600 rounded-full flex items-center justify-center\">\n            <Recycle className=\"h-10 w-10 text-white\" />\n          </div>\n          <h2 className=\"mt-6 text-3xl font-bold text-gray-900\">EcoPass</h2>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            Sustentabilidade em Créditos\n          </p>\n        </div>\n\n        <form className=\"mt-8 space-y-6 bg-white p-8 rounded-lg shadow-lg\" onSubmit={handleSubmit}>\n          <div className=\"flex justify-center space-x-4 mb-6\">\n            <button\n              type=\"button\"\n              onClick={() => setIsLogin(true)}\n              className={`px-4 py-2 rounded-md font-medium ${\n                isLogin\n                  ? 'bg-primary-600 text-white'\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n            >\n              Entrar\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => setIsLogin(false)}\n              className={`px-4 py-2 rounded-md font-medium ${\n                !isLogin\n                  ? 'bg-primary-600 text-white'\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n            >\n              Cadastrar\n            </button>\n          </div>\n\n          {errors.general && (\n            <div className=\"bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md\">\n              {errors.general}\n            </div>\n          )}\n\n          <div className=\"space-y-4\">\n            {!isLogin && (\n              <>\n                <div>\n                  <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">\n                    Nome completo\n                  </label>\n                  <input\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"text\"\n                    value={formData.name}\n                    onChange={handleInputChange}\n                    className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\n                  />\n                  {errors.name && <p className=\"mt-1 text-sm text-red-600\">{errors.name}</p>}\n                </div>\n\n                <div>\n                  <label htmlFor=\"cpf\" className=\"block text-sm font-medium text-gray-700\">\n                    CPF\n                  </label>\n                  <input\n                    id=\"cpf\"\n                    name=\"cpf\"\n                    type=\"text\"\n                    value={formData.cpf}\n                    onChange={handleInputChange}\n                    placeholder=\"000.000.000-00\"\n                    className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\n                  />\n                  {errors.cpf && <p className=\"mt-1 text-sm text-red-600\">{errors.cpf}</p>}\n                </div>\n              </>\n            )}\n\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n                Email\n              </label>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={handleInputChange}\n                autoComplete=\"email\"\n                className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\n              />\n              {errors.email && <p className=\"mt-1 text-sm text-red-600\">{errors.email}</p>}\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n                Senha\n              </label>\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={handleInputChange}\n                autoComplete=\"current-password\"\n                className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\n              />\n              {errors.password && <p className=\"mt-1 text-sm text-red-600\">{errors.password}</p>}\n            </div>\n\n            {!isLogin && (\n              <div>\n                <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700\">\n                  Confirmar senha\n                </label>\n                <input\n                  id=\"confirmPassword\"\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  value={formData.confirmPassword}\n                  onChange={handleInputChange}\n                  autoComplete=\"new-password\"\n                  className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\n                />\n                {errors.confirmPassword && <p className=\"mt-1 text-sm text-red-600\">{errors.confirmPassword}</p>}\n              </div>\n            )}\n          </div>\n\n          <div>\n            <button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isLoading ? (\n                <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n              ) : isLogin ? (\n                'Entrar'\n              ) : (\n                'Cadastrar'\n              )}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;","size_bytes":9233},"src/pages/MyCard.tsx":{"content":"import React from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { QRCodeSVG } from 'qrcode.react';\nimport { CreditCard, Info, MapPin, Clock, Recycle } from 'lucide-react';\n\nconst MyCard: React.FC = () => {\n  const { user } = useAuth();\n\n  if (!user) return null;\n\n  const acceptedMaterials = [\n    { type: 'Plástico', description: 'Garrafas PET, embalagens, sacolas', icon: '♻️' },\n    { type: 'Papel', description: 'Jornais, revistas, caixas de papelão', icon: '📄' },\n    { type: 'Vidro', description: 'Garrafas, potes, recipientes', icon: '🫙' },\n    { type: 'Metal', description: 'Latas de alumínio, ferro, cobre', icon: '🥫' },\n    { type: 'Eletrônicos', description: 'Celulares, pilhas, componentes', icon: '📱' },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-6 lg:py-8\">\n        {/* Header */}\n        <div className=\"mb-6 lg:mb-8\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900\">Meu Cartão Digital</h1>\n          <p className=\"text-gray-600 mt-1 text-sm sm:text-base\">\n            Apresente este cartão nos pontos de coleta para ganhar créditos\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8\">\n          {/* Digital Card */}\n          <div className=\"bg-white rounded-lg shadow-lg overflow-hidden\">\n            <div className=\"bg-gradient-to-r from-primary-600 to-primary-700 p-6 text-white\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h2 className=\"text-xl font-semibold\">EcoPass</h2>\n                  <p className=\"text-primary-100 text-sm\">Cartão de Reciclagem</p>\n                </div>\n                <CreditCard className=\"h-8 w-8 text-primary-200\" />\n              </div>\n            </div>\n\n            <div className=\"p-4 sm:p-6\">\n              <div className=\"text-center mb-6\">\n                <div className=\"bg-gray-50 p-4 sm:p-6 rounded-lg inline-block\">\n                  <QRCodeSVG\n                    value={`${user.cpf}-${user.id}`}\n                    size={150}\n                    className=\"mx-auto w-full max-w-[150px] h-auto\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"border-b pb-4\">\n                  <p className=\"text-sm text-gray-500 font-medium\">NOME COMPLETO</p>\n                  <p className=\"text-lg font-semibold text-gray-900\">{user.name}</p>\n                </div>\n\n                <div className=\"border-b pb-4\">\n                  <p className=\"text-sm text-gray-500 font-medium\">CPF</p>\n                  <p className=\"text-lg font-semibold text-gray-900\">{user.cpf}</p>\n                </div>\n\n                <div className=\"border-b pb-4\">\n                  <p className=\"text-sm text-gray-500 font-medium\">ID DO USUÁRIO</p>\n                  <p className=\"text-lg font-semibold text-gray-900\">{user.id}</p>\n                </div>\n\n                <div>\n                  <p className=\"text-sm text-gray-500 font-medium\">SALDO ATUAL</p>\n                  <p className=\"text-2xl font-bold text-primary-600\">R$ {user.credits.toFixed(2)}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Instructions and Info */}\n          <div className=\"space-y-6\">\n            {/* How to Use */}\n            <div className=\"bg-white rounded-lg shadow-lg p-6\">\n              <div className=\"flex items-center mb-4\">\n                <Info className=\"h-6 w-6 text-blue-600 mr-3\" />\n                <h3 className=\"text-xl font-semibold text-gray-900\">Como Usar</h3>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-start\">\n                  <div className=\"flex-shrink-0 w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center mr-3\">\n                    <span className=\"text-primary-600 font-semibold text-sm\">1</span>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-900\">Separe os materiais</p>\n                    <p className=\"text-gray-600 text-sm\">Organize seus recicláveis por tipo e peso</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start\">\n                  <div className=\"flex-shrink-0 w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center mr-3\">\n                    <span className=\"text-primary-600 font-semibold text-sm\">2</span>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-900\">Vá ao ponto de coleta</p>\n                    <p className=\"text-gray-600 text-sm\">Encontre o ponto mais próximo de você</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start\">\n                  <div className=\"flex-shrink-0 w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center mr-3\">\n                    <span className=\"text-primary-600 font-semibold text-sm\">3</span>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-900\">Apresente este QR Code</p>\n                    <p className=\"text-gray-600 text-sm\">O coletor irá escanear e validar seus materiais</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start\">\n                  <div className=\"flex-shrink-0 w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center mr-3\">\n                    <span className=\"text-primary-600 font-semibold text-sm\">4</span>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-900\">Receba seus créditos</p>\n                    <p className=\"text-gray-600 text-sm\">Após validação, os créditos aparecem no seu saldo</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Accepted Materials */}\n            <div className=\"bg-white rounded-lg shadow-lg p-6\">\n              <div className=\"flex items-center mb-4\">\n                <Recycle className=\"h-6 w-6 text-green-600 mr-3\" />\n                <h3 className=\"text-xl font-semibold text-gray-900\">Materiais Aceitos</h3>\n              </div>\n              \n              <div className=\"space-y-3\">\n                {acceptedMaterials.map((material, index) => (\n                  <div key={index} className=\"flex items-start p-3 bg-gray-50 rounded-lg\">\n                    <span className=\"text-2xl mr-3\">{material.icon}</span>\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{material.type}</p>\n                      <p className=\"text-gray-600 text-sm\">{material.description}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Tips */}\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-6\">\n              <h4 className=\"font-semibold text-green-900 mb-3\">💡 Dicas para Reciclagem</h4>\n              <ul className=\"space-y-2 text-green-800 text-sm\">\n                <li>• Lave embalagens antes de levar aos pontos de coleta</li>\n                <li>• Remova etiquetas e tampas quando possível</li>\n                <li>• Separe materiais por tipo para facilitar a pesagem</li>\n                <li>• Quanto mais você reciclar, mais créditos ganha!</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MyCard;","size_bytes":7685},"src/pages/NewRecycling.tsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { saveRecyclingItem, generateId, getUserRecyclingItems } from '../utils/localStorage';\nimport { RecyclingItem, CollectionPoint } from '../types';\nimport { Plus, MapPin, Clock, Recycle, Scale, Package } from 'lucide-react';\n\nconst NewRecycling: React.FC = () => {\n  const { user } = useAuth();\n  const [formData, setFormData] = useState({\n    type: '' as RecyclingItem['type'] | '',\n    weight: '',\n    quantity: '',\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n\n  const materialTypes = [\n    { value: 'plastic', label: 'Plástico', price: 1.0, icon: '♻️' },\n    { value: 'paper', label: 'Papel', price: 0.8, icon: '📄' },\n    { value: 'glass', label: 'Vidro', price: 0.5, icon: '🫙' },\n    { value: 'metal', label: 'Metal', price: 2.0, icon: '🥫' },\n    { value: 'electronics', label: 'Eletrônicos', price: 5.0, icon: '📱' },\n  ];\n\n  const collectionPoints: CollectionPoint[] = [\n    {\n      id: '1',\n      name: 'EcoPonto Centro',\n      address: 'Rua das Flores, 123 - Centro',\n      hours: 'Segunda a Sexta: 8h às 18h',\n      acceptedMaterials: ['Plástico', 'Papel', 'Vidro', 'Metal'],\n      distance: 0.5,\n    },\n    {\n      id: '2',\n      name: 'Reciclagem Sustentável',\n      address: 'Av. Verde, 456 - Jardins',\n      hours: 'Segunda a Sábado: 7h às 17h',\n      acceptedMaterials: ['Todos os materiais'],\n      distance: 1.2,\n    },\n    {\n      id: '3',\n      name: 'Cooperativa EcoVida',\n      address: 'Rua da Natureza, 789 - Vila Nova',\n      hours: 'Terça a Domingo: 9h às 16h',\n      acceptedMaterials: ['Eletrônicos', 'Plástico', 'Metal'],\n      distance: 2.1,\n    },\n  ];\n\n  const userRecyclingItems = user ? getUserRecyclingItems(user.id) : [];\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const calculateEstimatedValue = () => {\n    const selectedMaterial = materialTypes.find(m => m.value === formData.type);\n    if (!selectedMaterial || !formData.weight) return 0;\n    return selectedMaterial.price * parseFloat(formData.weight);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!user || !formData.type || !formData.weight || !formData.quantity) return;\n\n    setIsSubmitting(true);\n\n    try {\n      const newItem: RecyclingItem = {\n        id: generateId(),\n        userId: user.id,\n        type: formData.type as RecyclingItem['type'],\n        weight: parseFloat(formData.weight),\n        quantity: parseInt(formData.quantity),\n        estimatedValue: calculateEstimatedValue(),\n        status: 'pending',\n        date: new Date().toISOString(),\n      };\n\n      saveRecyclingItem(newItem);\n      \n      setFormData({ type: '', weight: '', quantity: '' });\n      setShowSuccess(true);\n      setTimeout(() => setShowSuccess(false), 3000);\n    } catch (error) {\n      console.error('Error saving recycling item:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-6 lg:py-8\">\n        {/* Header */}\n        <div className=\"mb-6 lg:mb-8\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900\">Nova Reciclagem</h1>\n          <p className=\"text-gray-600 mt-1 text-sm sm:text-base\">\n            Registre seus materiais recicláveis e ganhe créditos\n          </p>\n        </div>\n\n        {showSuccess && (\n          <div className=\"mb-6 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg\">\n            ✅ Reciclagem registrada com sucesso! Aguardando aprovação do coletor.\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8\">\n          {/* Form */}\n          <div className=\"bg-white rounded-lg shadow-lg p-6\">\n            <div className=\"flex items-center mb-6\">\n              <Plus className=\"h-6 w-6 text-primary-600 mr-3\" />\n              <h2 className=\"text-xl font-semibold text-gray-900\">Registrar Material</h2>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div>\n                <label htmlFor=\"type\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Tipo de Material\n                </label>\n                <select\n                  id=\"type\"\n                  name=\"type\"\n                  value={formData.type}\n                  onChange={handleInputChange}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\n                  required\n                >\n                  <option value=\"\">Selecione o tipo</option>\n                  {materialTypes.map((material) => (\n                    <option key={material.value} value={material.value}>\n                      {material.icon} {material.label} - R$ {material.price.toFixed(2)}/kg\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label htmlFor=\"weight\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <Scale className=\"h-4 w-4 inline mr-1\" />\n                    Peso (kg)\n                  </label>\n                  <input\n                    id=\"weight\"\n                    name=\"weight\"\n                    type=\"number\"\n                    step=\"0.1\"\n                    min=\"0\"\n                    value={formData.weight}\n                    onChange={handleInputChange}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\n                    placeholder=\"Ex: 2.5\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <label htmlFor=\"quantity\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <Package className=\"h-4 w-4 inline mr-1\" />\n                    Quantidade (unidades)\n                  </label>\n                  <input\n                    id=\"quantity\"\n                    name=\"quantity\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={formData.quantity}\n                    onChange={handleInputChange}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\n                    placeholder=\"Ex: 10\"\n                    required\n                  />\n                </div>\n              </div>\n\n              {formData.type && formData.weight && (\n                <div className=\"bg-primary-50 border border-primary-200 rounded-lg p-4\">\n                  <h4 className=\"font-semibold text-primary-900 mb-2\">Estimativa de Valor</h4>\n                  <p className=\"text-2xl font-bold text-primary-600\">\n                    R$ {calculateEstimatedValue().toFixed(2)}\n                  </p>\n                  <p className=\"text-primary-700 text-sm\">\n                    Valor sujeito à aprovação do coletor\n                  </p>\n                </div>\n              )}\n\n              <button\n                type=\"submit\"\n                disabled={isSubmitting || !formData.type || !formData.weight || !formData.quantity}\n                className=\"w-full bg-primary-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {isSubmitting ? (\n                  <div className=\"flex items-center justify-center\">\n                    <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                    Registrando...\n                  </div>\n                ) : (\n                  'Registrar Reciclagem'\n                )}\n              </button>\n            </form>\n          </div>\n\n          {/* Collection Points */}\n          <div className=\"space-y-6\">\n            <div className=\"bg-white rounded-lg shadow-lg p-6\">\n              <div className=\"flex items-center mb-6\">\n                <MapPin className=\"h-6 w-6 text-blue-600 mr-3\" />\n                <h3 className=\"text-xl font-semibold text-gray-900\">Pontos de Coleta Próximos</h3>\n              </div>\n\n              <div className=\"space-y-4\">\n                {collectionPoints.map((point) => (\n                  <div key={point.id} className=\"border border-gray-200 rounded-lg p-4 hover:border-primary-300 transition-colors\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-gray-900\">{point.name}</h4>\n                        <p className=\"text-gray-600 text-sm mt-1\">{point.address}</p>\n                        <div className=\"flex items-center text-gray-500 text-sm mt-2\">\n                          <Clock className=\"h-4 w-4 mr-1\" />\n                          {point.hours}\n                        </div>\n                        <div className=\"mt-2\">\n                          <span className=\"text-xs font-medium text-green-600 bg-green-100 px-2 py-1 rounded\">\n                            {point.acceptedMaterials.join(', ')}\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"text-right ml-4\">\n                        <span className=\"text-sm font-medium text-gray-900\">\n                          {point.distance} km\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Recent Submissions */}\n            <div className=\"bg-white rounded-lg shadow-lg p-6\">\n              <div className=\"flex items-center mb-6\">\n                <Recycle className=\"h-6 w-6 text-green-600 mr-3\" />\n                <h3 className=\"text-xl font-semibold text-gray-900\">Últimas Reciclagens</h3>\n              </div>\n\n              {userRecyclingItems.length === 0 ? (\n                <p className=\"text-gray-500 text-center py-8\">\n                  Nenhuma reciclagem registrada ainda.\n                </p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {userRecyclingItems.slice(0, 5).map((item) => {\n                    const material = materialTypes.find(m => m.value === item.type);\n                    return (\n                      <div key={item.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div className=\"flex items-center\">\n                          <span className=\"text-lg mr-3\">{material?.icon}</span>\n                          <div>\n                            <p className=\"font-medium text-gray-900\">\n                              {material?.label} - {item.weight}kg\n                            </p>\n                            <p className=\"text-sm text-gray-500\">\n                              {new Date(item.date).toLocaleDateString('pt-BR')}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                            item.status === 'approved' \n                              ? 'bg-green-100 text-green-800'\n                              : item.status === 'rejected'\n                              ? 'bg-red-100 text-red-800'\n                              : 'bg-yellow-100 text-yellow-800'\n                          }`}>\n                            {item.status === 'approved' ? 'Aprovado' : \n                             item.status === 'rejected' ? 'Rejeitado' : 'Pendente'}\n                          </span>\n                          <p className=\"text-sm font-medium text-gray-900 mt-1\">\n                            R$ {item.estimatedValue.toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NewRecycling;","size_bytes":12737},"src/pages/RedeemCredits.tsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { saveUser } from '../utils/localStorage';\nimport { TransportOption } from '../types';\nimport { CreditCard, Bus, Train, Navigation, Gift, ArrowRight } from 'lucide-react';\n\nconst RedeemCredits: React.FC = () => {\n  const { user, updateUser } = useAuth();\n  const [selectedTransport, setSelectedTransport] = useState<TransportOption | null>(null);\n  const [credits, setCredits] = useState('');\n  const [isRedeeming, setIsRedeeming] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n\n  const transportOptions: TransportOption[] = [\n    {\n      id: 'bus',\n      type: 'bus',\n      name: 'Ônibus Urbano',\n      pricePerCredit: 1.0,\n      icon: '🚌',\n    },\n    {\n      id: 'metro',\n      type: 'metro',\n      name: 'Metrô',\n      pricePerCredit: 1.5,\n      icon: '🚇',\n    },\n    {\n      id: 'train',\n      type: 'train',\n      name: 'Trem',\n      pricePerCredit: 2.0,\n      icon: '🚆',\n    },\n  ];\n\n  const calculatePassages = () => {\n    if (!selectedTransport || !credits) return 0;\n    return Math.floor(parseFloat(credits) / selectedTransport.pricePerCredit);\n  };\n\n  const handleRedeem = async () => {\n    if (!user || !selectedTransport || !credits) return;\n\n    const creditsToRedeem = parseFloat(credits);\n    if (creditsToRedeem > user.credits) return;\n\n    setIsRedeeming(true);\n\n    try {\n      const newCredits = user.credits - creditsToRedeem;\n      const newTotalRedeemed = user.totalRedeemed + creditsToRedeem;\n      \n      const updatedUser = {\n        ...user,\n        credits: newCredits,\n        totalRedeemed: newTotalRedeemed,\n      };\n\n      updateUser(updatedUser);\n      saveUser(updatedUser);\n\n      setCredits('');\n      setSelectedTransport(null);\n      setShowSuccess(true);\n      setTimeout(() => setShowSuccess(false), 3000);\n    } catch (error) {\n      console.error('Error redeeming credits:', error);\n    } finally {\n      setIsRedeeming(false);\n    }\n  };\n\n  if (!user) return null;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Resgatar Créditos</h1>\n          <p className=\"text-gray-600 mt-1\">\n            Troque seus créditos por passagens de transporte público\n          </p>\n        </div>\n\n        {showSuccess && (\n          <div className=\"mb-6 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg\">\n            ✅ Créditos resgatados com sucesso! Suas passagens foram creditadas.\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Current Balance */}\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-white rounded-lg shadow-lg p-6 mb-8\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Saldo Atual</h2>\n                  <div className=\"text-3xl font-bold text-primary-600\">\n                    R$ {user.credits.toFixed(2)}\n                  </div>\n                  <p className=\"text-gray-600 text-sm mt-1\">Disponível para resgate</p>\n                </div>\n                <CreditCard className=\"h-12 w-12 text-primary-600\" />\n              </div>\n            </div>\n          </div>\n\n          {/* Transport Options */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-white rounded-lg shadow-lg p-6\">\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-6\">Escolha o Transporte</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                {transportOptions.map((option) => (\n                  <button\n                    key={option.id}\n                    onClick={() => setSelectedTransport(option)}\n                    className={`p-4 rounded-lg border-2 transition-all ${\n                      selectedTransport?.id === option.id\n                        ? 'border-primary-500 bg-primary-50'\n                        : 'border-gray-200 hover:border-gray-300'\n                    }`}\n                  >\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl mb-2\">{option.icon}</div>\n                      <h4 className=\"font-semibold text-gray-900 text-sm\">{option.name}</h4>\n                      <p className=\"text-gray-600 text-xs mt-1\">\n                        R$ {option.pricePerCredit.toFixed(2)}/passagem\n                      </p>\n                    </div>\n                  </button>\n                ))}\n              </div>\n\n              {selectedTransport && (\n                <div className=\"space-y-4\">\n                  <div>\n                    <label htmlFor=\"credits\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Valor a resgatar (R$)\n                    </label>\n                    <input\n                      id=\"credits\"\n                      type=\"number\"\n                      step=\"0.1\"\n                      min=\"0\"\n                      max={user.credits}\n                      value={credits}\n                      onChange={(e) => setCredits(e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\n                      placeholder={`Máximo: R$ ${user.credits.toFixed(2)}`}\n                    />\n                  </div>\n\n                  {credits && (\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-semibold text-blue-900\">Você receberá:</p>\n                          <p className=\"text-2xl font-bold text-blue-600\">\n                            {calculatePassages()} passagem{calculatePassages() !== 1 ? 's' : ''}\n                          </p>\n                          <p className=\"text-blue-700 text-sm\">\n                            {selectedTransport.name}\n                          </p>\n                        </div>\n                        <ArrowRight className=\"h-8 w-8 text-blue-500\" />\n                      </div>\n                    </div>\n                  )}\n\n                  <button\n                    onClick={handleRedeem}\n                    disabled={isRedeeming || !credits || parseFloat(credits) > user.credits || parseFloat(credits) <= 0}\n                    className=\"w-full bg-primary-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isRedeeming ? (\n                      <div className=\"flex items-center justify-center\">\n                        <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                        Resgatando...\n                      </div>\n                    ) : (\n                      'Resgatar Créditos'\n                    )}\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Summary */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"bg-white rounded-lg shadow-lg p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Resumo da Conta</h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center pb-3 border-b\">\n                  <span className=\"text-gray-600\">Total Ganho</span>\n                  <span className=\"font-semibold text-green-600\">\n                    R$ {user.totalEarned.toFixed(2)}\n                  </span>\n                </div>\n                \n                <div className=\"flex justify-between items-center pb-3 border-b\">\n                  <span className=\"text-gray-600\">Total Resgatado</span>\n                  <span className=\"font-semibold text-blue-600\">\n                    R$ {user.totalRedeemed.toFixed(2)}\n                  </span>\n                </div>\n                \n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-600\">Saldo Atual</span>\n                  <span className=\"font-semibold text-primary-600\">\n                    R$ {user.credits.toFixed(2)}\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n                <h4 className=\"font-semibold text-gray-900 mb-2\">💡 Dica</h4>\n                <p className=\"text-gray-600 text-sm\">\n                  Recicle mais materiais para ganhar mais créditos e economizar no transporte público!\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RedeemCredits;","size_bytes":9180},"src/pages/ValidationAdmin.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { getRecyclingItems, updateRecyclingItem, getUsers, saveUser } from '../utils/localStorage';\nimport { useAuth } from '../context/AuthContext';\nimport { RecyclingItem, User } from '../types';\nimport { CheckCircle, XCircle, Clock, Scale, Package, User as UserIcon } from 'lucide-react';\n\nconst ValidationAdmin: React.FC = () => {\n  const { user: currentUser, updateUser } = useAuth();\n  const [recyclingItems, setRecyclingItems] = useState<RecyclingItem[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [filter, setFilter] = useState<'all' | 'pending' | 'approved' | 'rejected'>('pending');\n  const [isProcessing, setIsProcessing] = useState<Record<string, boolean>>({});\n\n  const materialTypes = [\n    { value: 'plastic', label: 'Plástico', price: 1.0, icon: '♻️' },\n    { value: 'paper', label: 'Papel', price: 0.8, icon: '📄' },\n    { value: 'glass', label: 'Vidro', price: 0.5, icon: '🫙' },\n    { value: 'metal', label: 'Metal', price: 2.0, icon: '🥫' },\n    { value: 'electronics', label: 'Eletrônicos', price: 5.0, icon: '📱' },\n  ];\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = () => {\n    const items = getRecyclingItems();\n    const allUsers = getUsers();\n    setRecyclingItems(items);\n    setUsers(allUsers);\n  };\n\n  const filteredItems = recyclingItems.filter(item => {\n    if (filter === 'all') return true;\n    return item.status === filter;\n  });\n\n  const handleApprove = async (item: RecyclingItem) => {\n    setIsProcessing(prev => ({ ...prev, [item.id]: true }));\n\n    try {\n      // Update recycling item status\n      updateRecyclingItem(item.id, { status: 'approved' });\n\n      // Find and update user credits\n      const user = users.find(u => u.id === item.userId);\n      if (user) {\n        const updatedUser = {\n          ...user,\n          credits: user.credits + item.estimatedValue,\n          totalEarned: user.totalEarned + item.estimatedValue,\n        };\n        saveUser(updatedUser);\n        \n        // If the approved user is the current logged user, update the context too\n        if (currentUser && currentUser.id === item.userId) {\n          updateUser(updatedUser);\n        }\n      }\n\n      loadData();\n    } catch (error) {\n      console.error('Error approving item:', error);\n    } finally {\n      setIsProcessing(prev => ({ ...prev, [item.id]: false }));\n    }\n  };\n\n  const handleReject = async (item: RecyclingItem) => {\n    setIsProcessing(prev => ({ ...prev, [item.id]: true }));\n\n    try {\n      updateRecyclingItem(item.id, { status: 'rejected' });\n      loadData();\n    } catch (error) {\n      console.error('Error rejecting item:', error);\n    } finally {\n      setIsProcessing(prev => ({ ...prev, [item.id]: false }));\n    }\n  };\n\n  const getUserById = (userId: string) => {\n    return users.find(u => u.id === userId);\n  };\n\n  const getMaterialInfo = (type: RecyclingItem['type']) => {\n    return materialTypes.find(m => m.value === type);\n  };\n\n  const getStatusColor = (status: RecyclingItem['status']) => {\n    switch (status) {\n      case 'approved': return 'bg-green-100 text-green-800';\n      case 'rejected': return 'bg-red-100 text-red-800';\n      default: return 'bg-yellow-100 text-yellow-800';\n    }\n  };\n\n  const getStatusText = (status: RecyclingItem['status']) => {\n    switch (status) {\n      case 'approved': return 'Aprovado';\n      case 'rejected': return 'Rejeitado';\n      default: return 'Pendente';\n    }\n  };\n\n  const pendingCount = recyclingItems.filter(item => item.status === 'pending').length;\n  const approvedCount = recyclingItems.filter(item => item.status === 'approved').length;\n  const rejectedCount = recyclingItems.filter(item => item.status === 'rejected').length;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Validação de Reciclagens</h1>\n          <p className=\"text-gray-600 mt-1\">\n            Interface para coletores aprovarem ou rejeitarem submissões\n          </p>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center\">\n              <Clock className=\"h-8 w-8 text-yellow-500\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Pendentes</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{pendingCount}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center\">\n              <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Aprovados</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{approvedCount}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center\">\n              <XCircle className=\"h-8 w-8 text-red-500\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Rejeitados</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{rejectedCount}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center\">\n              <UserIcon className=\"h-8 w-8 text-blue-500\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Total</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{recyclingItems.length}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"bg-white rounded-lg shadow-lg p-6 mb-6\">\n          <div className=\"flex flex-wrap gap-2\">\n            {[\n              { value: 'pending', label: 'Pendentes', count: pendingCount },\n              { value: 'approved', label: 'Aprovados', count: approvedCount },\n              { value: 'rejected', label: 'Rejeitados', count: rejectedCount },\n              { value: 'all', label: 'Todos', count: recyclingItems.length },\n            ].map((filterOption) => (\n              <button\n                key={filterOption.value}\n                onClick={() => setFilter(filterOption.value as any)}\n                className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n                  filter === filterOption.value\n                    ? 'bg-primary-600 text-white'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }`}\n              >\n                {filterOption.label} ({filterOption.count})\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Items List */}\n        <div className=\"bg-white rounded-lg shadow-lg overflow-hidden\">\n          {filteredItems.length === 0 ? (\n            <div className=\"p-8 text-center\">\n              <p className=\"text-gray-500\">Nenhuma reciclagem encontrada para este filtro.</p>\n            </div>\n          ) : (\n            <div className=\"divide-y divide-gray-200\">\n              {filteredItems.map((item) => {\n                const user = getUserById(item.userId);\n                const material = getMaterialInfo(item.type);\n                const isProcessingItem = isProcessing[item.id];\n\n                return (\n                  <div key={item.id} className=\"p-6 hover:bg-gray-50\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-4\">\n                          <span className=\"text-2xl\">{material?.icon}</span>\n                          <div>\n                            <h3 className=\"text-lg font-semibold text-gray-900\">\n                              {material?.label}\n                            </h3>\n                            <div className=\"flex items-center space-x-4 text-sm text-gray-600 mt-1\">\n                              <div className=\"flex items-center\">\n                                <Scale className=\"h-4 w-4 mr-1\" />\n                                {item.weight} kg\n                              </div>\n                              <div className=\"flex items-center\">\n                                <Package className=\"h-4 w-4 mr-1\" />\n                                {item.quantity} unidades\n                              </div>\n                              <div className=\"flex items-center\">\n                                <UserIcon className=\"h-4 w-4 mr-1\" />\n                                {user?.name || 'Usuário não encontrado'}\n                              </div>\n                            </div>\n                            <p className=\"text-sm text-gray-500 mt-1\">\n                              {new Date(item.date).toLocaleDateString('pt-BR')} às {' '}\n                              {new Date(item.date).toLocaleTimeString('pt-BR')}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"text-right\">\n                          <p className=\"text-lg font-bold text-gray-900\">\n                            R$ {item.estimatedValue.toFixed(2)}\n                          </p>\n                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(item.status)}`}>\n                            {getStatusText(item.status)}\n                          </span>\n                        </div>\n\n                        {item.status === 'pending' && (\n                          <div className=\"flex space-x-2\">\n                            <button\n                              onClick={() => handleApprove(item)}\n                              disabled={isProcessingItem}\n                              className=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n                            >\n                              {isProcessingItem ? (\n                                <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                              ) : (\n                                <CheckCircle className=\"h-4 w-4\" />\n                              )}\n                            </button>\n                            <button\n                              onClick={() => handleReject(item)}\n                              disabled={isProcessingItem}\n                              className=\"bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n                            >\n                              {isProcessingItem ? (\n                                <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                              ) : (\n                                <XCircle className=\"h-4 w-4\" />\n                              )}\n                            </button>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ValidationAdmin;","size_bytes":11914},"src/types/index.ts":{"content":"export interface User {\n  id: string;\n  name: string;\n  cpf: string;\n  email: string;\n  credits: number;\n  totalEarned: number;\n  totalRedeemed: number;\n}\n\nexport interface RecyclingItem {\n  id: string;\n  userId: string;\n  type: 'plastic' | 'paper' | 'glass' | 'metal' | 'electronics';\n  weight: number;\n  quantity: number;\n  estimatedValue: number;\n  status: 'pending' | 'approved' | 'rejected';\n  date: string;\n  collectorId?: string;\n}\n\nexport interface CollectionPoint {\n  id: string;\n  name: string;\n  address: string;\n  hours: string;\n  acceptedMaterials: string[];\n  distance?: number;\n}\n\nexport interface TransportOption {\n  id: string;\n  type: 'bus' | 'metro' | 'train';\n  name: string;\n  pricePerCredit: number;\n  icon: string;\n}","size_bytes":739},"src/utils/localStorage.ts":{"content":"import { User, RecyclingItem } from '../types';\n\n// Storage keys\nconst STORAGE_KEYS = {\n  CURRENT_USER: 'ecopass_current_user',\n  USERS: 'ecopass_users',\n  RECYCLING_ITEMS: 'ecopass_recycling_items',\n};\n\n// User functions\nexport const getCurrentUser = (): User | null => {\n  const user = localStorage.getItem(STORAGE_KEYS.CURRENT_USER);\n  return user ? JSON.parse(user) : null;\n};\n\nexport const setCurrentUser = (user: User): void => {\n  localStorage.setItem(STORAGE_KEYS.CURRENT_USER, JSON.stringify(user));\n};\n\nexport const clearCurrentUser = (): void => {\n  localStorage.removeItem(STORAGE_KEYS.CURRENT_USER);\n};\n\nexport const getUsers = (): User[] => {\n  const users = localStorage.getItem(STORAGE_KEYS.USERS);\n  return users ? JSON.parse(users) : [];\n};\n\nexport const saveUser = (user: User): void => {\n  const users = getUsers();\n  const existingIndex = users.findIndex(u => u.id === user.id);\n  \n  if (existingIndex >= 0) {\n    users[existingIndex] = user;\n  } else {\n    users.push(user);\n  }\n  \n  localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(users));\n};\n\nexport const findUserByEmail = (email: string): User | undefined => {\n  const users = getUsers();\n  return users.find(u => u.email === email);\n};\n\nexport const findUserByCpf = (cpf: string): User | undefined => {\n  const users = getUsers();\n  return users.find(u => u.cpf === cpf);\n};\n\n// Recycling functions\nexport const getRecyclingItems = (): RecyclingItem[] => {\n  const items = localStorage.getItem(STORAGE_KEYS.RECYCLING_ITEMS);\n  return items ? JSON.parse(items) : [];\n};\n\nexport const saveRecyclingItem = (item: RecyclingItem): void => {\n  const items = getRecyclingItems();\n  items.push(item);\n  localStorage.setItem(STORAGE_KEYS.RECYCLING_ITEMS, JSON.stringify(items));\n};\n\nexport const updateRecyclingItem = (itemId: string, updates: Partial<RecyclingItem>): void => {\n  const items = getRecyclingItems();\n  const index = items.findIndex(item => item.id === itemId);\n  \n  if (index >= 0) {\n    items[index] = { ...items[index], ...updates };\n    localStorage.setItem(STORAGE_KEYS.RECYCLING_ITEMS, JSON.stringify(items));\n  }\n};\n\nexport const getUserRecyclingItems = (userId: string): RecyclingItem[] => {\n  const items = getRecyclingItems();\n  return items.filter(item => item.userId === userId);\n};\n\n// Generate unique ID\nexport const generateId = (): string => {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\n};","size_bytes":2426}},"version":1}